import{l as i,c as a,b as n,ai as l}from"./chunks/framework.DfOqixww.js";const c=JSON.parse('{"title":"Node.js 环境","description":"","frontmatter":{},"headers":[],"relativePath":"blog/docker/node.md","filePath":"blog/docker/node.md"}'),h={name:"blog/docker/node.md"};function p(e,s,t,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="node-js-环境" tabindex="-1">Node.js 环境 <a class="header-anchor" href="#node-js-环境" aria-label="Permalink to &quot;Node.js 环境&quot;">​</a></h1><h2 id="why" tabindex="-1">why <a class="header-anchor" href="#why" aria-label="Permalink to &quot;why&quot;">​</a></h2><ul><li>测试：快速生成 Node.js 环境，执行 JS/TS 测试脚本</li><li>运行/构建：指定 Node.js 版本，运行/构建 JS/TS 前后端服务</li><li>开发：创建可复用 Node.js 容器，作为 JS/TS 开发环境</li></ul><h2 id="how" tabindex="-1">how <a class="header-anchor" href="#how" aria-label="Permalink to &quot;how&quot;">​</a></h2><h3 id="○-测试" tabindex="-1">○ 测试 <a class="header-anchor" href="#○-测试" aria-label="Permalink to &quot;○ 测试&quot;">​</a></h3><ul><li>挂载脚本目录</li><li>运行 Node.js 镜像，运行挂载目录中的脚本</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --mount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type=bind,source=/home/aubur/app,target=/app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/library/node:lts-alpine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app/index.js</span></span></code></pre></div><h3 id="○-运行-构建" tabindex="-1">○ 运行/构建 <a class="header-anchor" href="#○-运行-构建" aria-label="Permalink to &quot;○ 运行/构建&quot;">​</a></h3><ul><li>挂载 pnpm 全局存储目录、项目目录（含 node_modules）</li><li>构建镜像：安装依赖，运行/构建项目</li><li>运行镜像</li></ul><h3 id="○-开发" tabindex="-1">○ 开发 <a class="header-anchor" href="#○-开发" aria-label="Permalink to &quot;○ 开发&quot;">​</a></h3><ul><li>挂载 pnpm 全局存储目录、项目目录（含 node_modules）、启动脚本目录，<code>/root/.vscode-server</code> 目录</li><li>构建镜像 <ul><li>基于 node + alpine</li><li>暴露 ssh 的 22 端口</li><li>更新 alpine 系统软件包，ssh 相关 + vscode 远程连接相关</li><li>生成 ssh 密钥</li><li>更新 ssh 配置</li><li>执行启动脚本：添加授权的 ssh 公钥（使本地无须密码连接容器），运行 sshd，不退出脚本</li></ul></li><li>运行容器，vscode 远程连接容器</li></ul><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 镜像来自渡渡鸟镜像同步站</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/library/node:lts-alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暴露 ssh 端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 22</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 软件源来自阿里云</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sed -i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/apk/repositories \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; apk update \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; apk add gcompat libstdc++ curl bash git openssh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成 ssh 密钥</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ssh-keygen -A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># vscode ssh 连接，依赖 AllowTcpForwarding</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 🚨注意：/etc/ssh/sshd_config 和 /etc/ssh/ssh_config 是 2 个不同的文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sed -i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s/#PermitRootLogin.*/PermitRootLogin yes/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/ssh/sshd_config \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; sed -i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s/#PubkeyAuthentication.*/PubkeyAuthentication yes/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/ssh/sshd_config \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; sed -i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s/#PasswordAuthentication.*/PasswordAuthentication yes/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/ssh/sshd_config \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; sed -i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s/#PermitTunnel.*/PermitTunnel yes/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/ssh/sshd_config \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; sed -i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s/AllowTcpForwarding.*/AllowTcpForwarding yes/g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/ssh/sshd_config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置 ssh 本地公钥到容器中（运行时配置，方便动态修改）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 🚨注意：~/.ssh/authorized_keys 中 ~ home 目录，对应容器中的 /root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 脚本中最后一行命令实现脚本不结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 🚨init.sh 脚本也可直接从主机挂载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mkdir -p /root/.ssh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt; /root/init.sh \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cat /work/ssh/authorized_keys &gt; /root/.ssh/authorized_keys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt; /root/init.sh \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/usr/sbin/sshd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt; /root/init.sh \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &amp;&amp; echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tail -f /dev/null&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt; /root/init.sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动 ssh 服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/root/init.sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aubur/node-lts-alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 准备挂载目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/aubur/work/docker/ssh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_ed25519.pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/aubur/work/docker/ssh/authorized_keys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 静默运行，启动 ssh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type=bind,source=/home/aubur/work/docker,target=/work</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4022:22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aubur/node-lts-alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 静默运行后，可通过容器 id 临时进入交互模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $containerId </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 交互运行，启动终端，用于调试容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type=bind,source=/home/aubur/work/docker,target=/work</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4022:22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aubur/node-lts-alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/sh</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.cnblogs.com/servlet-context/p/18144665" target="_blank" rel="noreferrer">【VSCode】远程编码，ssh连接卡在downloading vscode server - NotReferenced - 博客园</a>，手动安装 vscode server，配置 ssh 公钥</li></ul>`,15)]))}const g=i(h,[["render",p]]);export{c as __pageData,g as default};
