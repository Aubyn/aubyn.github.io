import{l as i,c as a,b as e,ai as l}from"./chunks/framework.DfOqixww.js";const c=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"blog/cheetsheet/docker.md","filePath":"blog/cheetsheet/docker.md"}'),n={name:"blog/cheetsheet/docker.md"};function t(h,s,r,k,p,o){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><h2 id="why" tabindex="-1">why <a class="header-anchor" href="#why" aria-label="Permalink to &quot;why&quot;">​</a></h2><p><strong>开发环境一致</strong>。以前端开发为例，再开发之前，必需配置好 node 环境，确保环境变量能正常使用。这个过程可以通过拉取并运行 Docker 镜像一步代替。在不同机器上也用同样的操作快速生成自己想要的环境。</p><p><strong>构建环境一致</strong>。一致的环境，步骤化编排、执行构建流程，获得目标产物。</p><p><strong>运行时一致</strong>。在一致的环境中运行，减少环境对应用能力的影响。</p><p>相较于类似用途的虚拟机，Docker 有以下区别：</p><ul><li>运行在宿主的独立进程中，使用宿主内核，无需硬件模拟，更为轻量</li><li>能访问、修改宿主数据</li></ul><p>本文的目的：了解 Docker 的组成，安装、拉取、运行 Docker，能创建自己的镜像并本地运行，能解决常见运行问题，了解常用优化手段。</p><h2 id="how" tabindex="-1">how <a class="header-anchor" href="#how" aria-label="Permalink to &quot;how&quot;">​</a></h2><h3 id="○-docker-相关概念" tabindex="-1">○ Docker 相关概念 <a class="header-anchor" href="#○-docker-相关概念" aria-label="Permalink to &quot;○ Docker 相关概念&quot;">​</a></h3><ul><li><code>Docker Desktop</code>：提供管理 Docker 容器和镜像的 GUI，主要用于 Windows/macOS 中，Linux 中可无需安装。</li><li><code>Docker Engine</code>：Docker 核心组件，负责容器的创建、运行和管理。提供 Daemon 负责管理容器生命周期与系统资源的交互，提供 CLI 便于与 Daemon 交互，提供 REST API 便于其他程序和 Docker Daemon 交互。</li><li><code>Docker Compose</code>：定义和运行多个相关联的 Docker 容器应用。服务对应运行的容器实例，项目对应容器组成的完整业务单元。</li><li><code>Docker Swarm</code>：Docker 官方容器编排工具</li><li><code>容器编排</code>：自动化部署（CI/CD，多主机、多容器实例、扩容缩减），负载均衡（容器实例的流量调度），服务发现与下线（识别服务，微服务通信，故障容器实例下线），监控和日志管理。管理同一个物理节点（Node）中的所有容器（容器组 Pod）</li></ul><h3 id="○-安装-docker" tabindex="-1">○ 安装 Docker <a class="header-anchor" href="#○-安装-docker" aria-label="Permalink to &quot;○ 安装 Docker&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">paru</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.service</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $USER</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newgrp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行测试容器验证，会自动拉取镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span></code></pre></div><h3 id="○-拉取" tabindex="-1">○ 拉取 <a class="header-anchor" href="#○-拉取" aria-label="Permalink to &quot;○ 拉取&quot;">​</a></h3><p>格式：</p><ul><li>远端拉取：<code>docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</code></li><li>远端拉取后，可保存到本地：<code>docker save -o [output-file.tar] [image-name]</code></li></ul><h3 id="○-运行" tabindex="-1">○ 运行 <a class="header-anchor" href="#○-运行" aria-label="Permalink to &quot;○ 运行&quot;">​</a></h3><p>示例：</p><ul><li>运行拉取的镜像，可终端交互，关闭后删除：<code>docker run -it --rm ubuntu:18:04 bash</code></li><li>运行拉取的镜像，后台运行：<code>docker run -d --rm ubuntu:18:04</code></li><li>运行保存的镜像：<code>docker load -i /home/docker-images/gitlab-ce-17.0.1.tar</code></li></ul><blockquote><p>添加容器名称 <code>--name [container-name]</code></p></blockquote><h3 id="○-状态" tabindex="-1">○ 状态 <a class="header-anchor" href="#○-状态" aria-label="Permalink to &quot;○ 状态&quot;">​</a></h3><ul><li>镜像列表：<code>docker images</code></li><li>运行中的容器：<code>docker ps -s</code></li><li>关闭容器：<code>docker stop --timeout=0 [container-id]</code>，默认需要等 10s</li><li>关闭后重新启动：<code>docker start [container-id]</code></li><li>进入容器的交互模式：<code>docker attach [container-id]</code>，或 <code>docker exec -it [container-id] bash</code></li></ul><h3 id="○-构建" tabindex="-1">○ 构建 <a class="header-anchor" href="#○-构建" aria-label="Permalink to &quot;○ 构建&quot;">​</a></h3><ul><li>构建并打 tag：<code>docker build -t [image-name] .</code>，镜像名形如：aubur/node-lts-alpine</li></ul><h3 id="○-删除" tabindex="-1">○ 删除 <a class="header-anchor" href="#○-删除" aria-label="Permalink to &quot;○ 删除&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有已停止的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 虚悬镜像清理：删除所有停止的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $imageId</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $containerId</span></span></code></pre></div><h3 id="○-数据卷" tabindex="-1">○ 数据卷 <a class="header-anchor" href="#○-数据卷" aria-label="Permalink to &quot;○ 数据卷&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [vol-name]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查数据卷信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [vol-name]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除指定数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [vol-name]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除所有未使用的数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制宿主机数据到容器挂载的数据卷中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [host-file] [container-name]:[container-path]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./index.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mynginx:/usr/share/nginx/html/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>挂载“可用的宿主机路径”到容器中时，会自动通过 <code>bind</code> 的形式挂载，否则会自动创建对应数据卷</p></div><h3 id="○-最佳实践" tabindex="-1">○ 最佳实践 <a class="header-anchor" href="#○-最佳实践" aria-label="Permalink to &quot;○ 最佳实践&quot;">​</a></h3><ul><li>容器无状态，只提供一个环境壳子</li><li>容器只运行一个进程</li><li>运行进程所需动态数据只读写外部，如：实时更新安装的依赖</li><li>容器一直运行，需满足 CMD 执行的命令不结束。</li><li>不要挂载容器 home 目录，会有权限问题，导致 ssh 无法正常无密码连接</li><li>运行：始终添加 <code>--rm</code> 参数，自动删除容器</li><li>构建：Dockerfile 所在目录，不要添加存放用于挂载的目录</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://yeasy.gitbook.io/docker_practice" target="_blank" rel="noreferrer">Docker 从入门到实践</a></li><li><a href="https://juejin.cn/post/7269668219488354361" target="_blank" rel="noreferrer">使用 Docker 实现前端应用的标准化构建、部署和运行</a></li><li><a href="https://ratpanel.github.io/" target="_blank" rel="noreferrer">耗子面板</a></li><li><a href="https://www.composerize.com/" target="_blank" rel="noreferrer">Composerize</a>，将 <code>docker run</code> 命令转换为 <code>compose.yaml</code></li><li><a href="https://github.com/traefik/traefik" target="_blank" rel="noreferrer">traefik/traefik</a>，反向代理容器服务，带面板</li><li><a href="https://github.com/louislam/dockge" target="_blank" rel="noreferrer">louislam/dockge</a>,<code>compose.yaml</code> 管理</li><li><a href="https://www.yunxicoding.top/post/docker/new-laravel-docker-compose/" target="_blank" rel="noreferrer">探索一种新的项目组织形式</a>，<a href="https://github.com/yunxi177/laravel12_template" target="_blank" rel="noreferrer">项目模板</a>，有利于虚拟化的开发、构建部署和日志查看</li><li><a href="https://www.kimi.com/share/d1qb7981gemd0kbhd10g" target="_blank" rel="noreferrer">docker 容器日志持久化（kimi）</a></li><li><a href="https://kimi.moonshot.cn/share/d1q413l7vds83gjnvuig" target="_blank" rel="noreferrer">查看后台容器的日志（kimi）</a></li></ul>`,33)]))}const F=i(n,[["render",t]]);export{c as __pageData,F as default};
