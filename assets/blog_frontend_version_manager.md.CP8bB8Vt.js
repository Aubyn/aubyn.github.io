import{l as a,c as o,b as i,ai as l}from"./chunks/framework.DfOqixww.js";const m=JSON.parse('{"title":"VMR","description":"","frontmatter":{},"headers":[],"relativePath":"blog/frontend/version_manager.md","filePath":"blog/frontend/version_manager.md"}'),t={name:"blog/frontend/version_manager.md"};function r(d,e,n,c,s,h){return i(),o("div",null,e[0]||(e[0]=[l('<h1 id="vmr" tabindex="-1">VMR <a class="header-anchor" href="#vmr" aria-label="Permalink to &quot;VMR&quot;">​</a></h1><h2 id="why" tabindex="-1">why <a class="header-anchor" href="#why" aria-label="Permalink to &quot;why&quot;">​</a></h2><p>在以往，安装各编程语言的开发环境是一件门槛比较高的事情。在不同的系统上，大多涉及且不限于以下步骤：</p><ol><li>外网权限，查找语言的官网，获取安装指南。</li><li>阅读安装指南，大概率需要看懂英文，或者需要进一步获取翻译工具来辅助阅读，或者找中文文档（可能过时）。</li><li>在外网下安装语言核心及其必须的依赖</li><li>不同系统中，配置环境变量</li><li>配置软件包的国内源</li><li>下载并配置 IDE 并激活</li></ol><p>而现在在使用“外网 + AI + VMR + Visual Studio Code”就能快速实现开发环境的搭建。</p><p>其中，VMR 帮助完成了 1、2、3、4 步，仅需选择编程语言和版本，回车后等待安装完成。</p><p><a href="https://github.com/gvcgo/version-manager" target="_blank" rel="noreferrer">VMR</a>，即 Version Manager，是编程语言 SDK 的版本管理工具。</p><h2 id="how" tabindex="-1">how <a class="header-anchor" href="#how" aria-label="Permalink to &quot;how&quot;">​</a></h2><p>VMR 是一款类似 lazygit 的 TUI 终端界面应用。</p><p>按照 GitHub Readme 的指导，输入命令安装 VMR。接着，在终端中，执行 <code>vmr</code> 即可根据界面提示翻阅、搜索编程语言 SDK，翻阅、搜索 SDK 版本，然后安装。</p><h2 id="what" tabindex="-1">what <a class="header-anchor" href="#what" aria-label="Permalink to &quot;what&quot;">​</a></h2><p>以安装 Go 开发环境为例：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>下方说涉及所有按键，都可以直接在终端上直观看到（TUI 的特点），无需记忆</p></div><ol><li>开始：执行 <code>vmr</code></li><li>搜索：输入 <code>go</code> 回车搜索</li><li>选择 SDK：搜索结果有多项时，可按 <code>tab</code> 从输入模式到列表选择模式，按 <code>j</code> 向下翻阅，按 <code>k</code> 向上翻阅</li><li>搜索 SDK 可安装的版本：列表停留在目标结果后，按 <code>s</code> 搜索可用版本</li><li>选择版本：按 <code>tab</code> 选择输入模式或列表选择模式，同第 3 步一样翻阅选择。</li><li>安装目标版本 SDK：按 <code>i</code> 进行安装</li></ol>',14)]))}const _=a(t,[["render",r]]);export{m as __pageData,_ as default};
